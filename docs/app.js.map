{
  "version": 3,
  "sources": ["../docs/app.js", "../docs/helpers.js", "../docs/Connection.js"],
  "sourcesContent": ["import {render, html} from \"https://cdn.skypack.dev/uhtml\";\nimport {Connection} from \"./Connection.js\";\nclass App {\n  constructor() {\n    this.wizardIsOpen = false;\n    this.assignmentMode = \"auto\";\n    this.numberOfRooms = 1;\n    this.isInBreakout = false;\n    this.domain = \"meet.jit.si\";\n    this.roomName = \"\";\n    this.init();\n  }\n  async init() {\n    this.draw();\n    this.connection = new Connection(this);\n    this.draw();\n    this.connection.addEventListener(\"command\", (event) => {\n      const message = event.detail;\n      if (message.command && message.command === \"change-room\") {\n        this.isInBreakout = message.isInBreakout;\n        this.draw();\n      }\n    });\n  }\n  draw() {\n    const openBreakoutMenu = () => {\n      this.wizardIsOpen = true;\n      this.draw();\n    };\n    const redirect = () => {\n      window.location.href = `/${this.domain}/${this.roomName}`;\n    };\n    render(document.querySelector(\"#app\"), html`\n      ${!this.connection?.domain ? html`\n      <label>Jitsi domain:</label><input onchange=${(event) => this.domain = event.target.value} .value=${this.domain}><br>\n      <label>Room name:</label><input onchange=${(event) => this.roomName = event.target.value} .value=${this.roomName}>\n      <button onclick=${redirect}>Go</button>\n      ` : html`\n      ${this.isInBreakout ? html`\n      <button onclick=${() => this.return()} class=\"breakout-button\"><img src=\"/close.svg\" /></button>\n      ` : html`\n      <button onclick=${openBreakoutMenu} class=\"breakout-button\"><img src=\"/icon.svg\" /></button>\n    `}\n    \n    ${this.wizardIsOpen ? this.wizardTemplate() : html``}\n    `}\n    <div class=\"meet\"></div>\n    `);\n  }\n  wizardTemplate() {\n    const participants = this.connection.api.getParticipantsInfo();\n    const setAssignmentMode = (mode) => {\n      this.assignmentMode = mode;\n      this.draw();\n    };\n    const setNumberOfRooms = (event) => {\n      this.numberOfRooms = parseInt(event.target.value);\n      this.draw();\n    };\n    const submitForm = (event) => {\n      const formData = new FormData(event.target);\n      const assignment = {};\n      formData.forEach((value, key) => {\n        if (key.split(\":\").length > 1) {\n          if (!assignment[key.split(\":\")[0]])\n            assignment[key.split(\":\")[0]] = {};\n          assignment[key.split(\":\")[0]][key.split(\":\")[1]] = parseInt(value.toString());\n        } else {\n          assignment[key] = value;\n        }\n      });\n      this.executeBreakout(assignment);\n      event.preventDefault();\n    };\n    const cancel = () => {\n      this.wizardIsOpen = false;\n      this.draw();\n    };\n    return html`\n    <div class=\"breakout-wizard\">\n      <form onsubmit=${submitForm}>\n      <h1>Breakout rooms</h1>\n      <p>Create <input type=\"number\" name=\"numberOfRooms\" onchange=\"${setNumberOfRooms}\" .value=${this.numberOfRooms} min=\"1\" max=\"${Math.ceil(participants.length / 2)}\" /> breakout rooms</p>\n      <p>Assignment mode: \n      <label><input onchange=${() => setAssignmentMode(\"auto\")} checked=${this.assignmentMode === \"auto\" ? true : null} type=\"radio\" name=\"assignmentMode\" value=\"auto\"> automatic</label>\n      <label><input onchange=${() => setAssignmentMode(\"manual\")} checked=${this.assignmentMode === \"manual\" ? true : null} type=\"radio\" name=\"assignmentMode\" value=\"manual\"> manual</label>\n\n      ${this.assignmentMode === \"manual\" ? html`\n        <ul>\n        ${participants.map((participant) => html`\n        <li>\n          ${participant.formattedDisplayName}\n          <input type=\"number\" name=${\"participant:\" + (participant.formattedDisplayName.includes(\"(me)\") ? \"_self\" : participant.participantId)} value=\"1\" min=\"1\" max=\"${this.numberOfRooms}\" />\n        </li>\n        `)}\n        </ul>\n      ` : html``}\n\n      </p>\n      <button>Execute</button>\n      <span onclick=${cancel}>Cancel</span>\n      </form>\n    </div>\n    `;\n  }\n  executeBreakout(assignment) {\n    for (const [id, room] of Object.entries(assignment.participant)) {\n      this.connection.sendById(id, {\n        command: \"change-room\",\n        isInBreakout: true,\n        roomName: `${this.connection.roomName}-${room}`\n      });\n    }\n    this.wizardIsOpen = false;\n    this.draw();\n  }\n  return() {\n    this.connection.broadcast({\n      command: \"change-room\",\n      isInBreakout: false,\n      roomName: this.connection.roomName\n    });\n  }\n}\nnew App();\n", "export function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nexport function uuidv4() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == \"x\" ? r : r & 3 | 8;\n    return v.toString(16);\n  });\n}\n", "import {uuidv4} from \"./helpers.js\";\nconst pathSplit = location.pathname.split(\"/\");\nconst domain = pathSplit[1];\nconst log = (...text) => console.log(\"LOCAL::\", ...text);\nexport class Connection extends EventTarget {\n  constructor(app) {\n    super();\n    this.api = null;\n    this.peers = new Map();\n    this.participants = new Map();\n    this.channels = new Map();\n    this.webRTCConfiguration = {iceServers: [{urls: \"stun:stun.l.google.com:19302\"}]};\n    this.roomName = pathSplit[2];\n    this.domain = pathSplit[1];\n    this.app = app;\n    if (this.domain)\n      this.init();\n  }\n  async init() {\n    this.element = document.querySelector(\".meet\");\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src = `//thingproxy.freeboard.io/fetch/https://${domain}/external_api.js`;\n    script.onload = () => {\n      this.guid = uuidv4();\n      this.api = new JitsiMeetExternalAPI(domain, {\n        parentNode: this.element,\n        roomName: this.roomName\n      });\n      this.attachApiHandling();\n    };\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n    this.addEventListener(\"command\", (event) => {\n      const message = event.detail;\n      if (message.command && message.command === \"change-room\") {\n        this.api.dispose();\n        this.api = new JitsiMeetExternalAPI(domain, {\n          parentNode: this.element,\n          roomName: message.roomName\n        });\n        this.attachApiHandling();\n      }\n    });\n  }\n  attachApiHandling() {\n    this.api.addListener(\"endpointTextMessageReceived\", async (message) => {\n      const messageData = message.data.eventData.text;\n      const participantId = message.data.senderInfo.id;\n      const participant = this.participants.get(participantId);\n      if (messageData.guid && !participant.guid)\n        participant.guid = messageData.guid;\n      try {\n        if (messageData.offer) {\n          if (messageData.time > participant.time) {\n            const connection = new RTCPeerConnection(this.webRTCConfiguration);\n            this.peers.set(participantId, connection);\n            connection.addEventListener(\"datachannel\", ({channel}) => {\n              this.channels.set(participant.id, channel);\n              this.attachChannelHandling(channel, participant.id);\n            });\n            this.attachIceHandling(connection, participant.id);\n            connection.setRemoteDescription(new RTCSessionDescription(messageData.offer));\n            const answer = await connection.createAnswer();\n            await connection.setLocalDescription(answer);\n            this.api.executeCommand(\"sendEndpointTextMessage\", participant.id, {answer});\n          }\n        }\n        if (messageData.answer) {\n          const connection = this.peers.get(participant.id);\n          const remoteDescription = new RTCSessionDescription(messageData.answer);\n          await connection.setRemoteDescription(remoteDescription);\n        }\n        if (messageData.candidate) {\n          const connection = this.peers.get(participant.id);\n          if (connection)\n            await connection.addIceCandidate(messageData.candidate);\n        }\n      } catch (exception) {\n        log(exception);\n      }\n    });\n    this.api.addListener(\"outgoingMessage\", (message) => {\n    });\n    this.api.addListener(\"participantJoined\", (participant) => {\n      const time = Date.now();\n      if (!this.participants.has(participant.id)) {\n        this.participants.set(participant.id, {...participant, time});\n        setTimeout(async () => {\n          if (!this.peers.has(participant.id)) {\n            const connection = new RTCPeerConnection(this.webRTCConfiguration);\n            this.peers.set(participant.id, connection);\n            const channel = connection.createDataChannel(\"jitsi-breakout\");\n            this.attachChannelHandling(channel, participant.id);\n            this.channels.set(participant.id, channel);\n            this.attachIceHandling(connection, participant.id);\n            const offer = await connection.createOffer();\n            await connection.setLocalDescription(offer);\n            this.api.executeCommand(\"sendEndpointTextMessage\", participant.id, {offer, time});\n          }\n        }, 1500);\n      }\n    });\n  }\n  attachIceHandling(connection, participantId) {\n    connection.addEventListener(\"icecandidate\", (event) => {\n      if (event.candidate) {\n        this.api.executeCommand(\"sendEndpointTextMessage\", participantId, {candidate: event.candidate});\n      } else {\n        log(\"done\");\n      }\n    });\n  }\n  attachChannelHandling(channel, participantId) {\n    channel.onmessage = (message) => {\n      const parsedMessage = JSON.parse(message.data);\n      this.processCommand(parsedMessage);\n      log(message.data);\n    };\n    channel.onclose = () => log(\"closed\");\n    channel.onerror = (error) => log(error);\n  }\n  broadcast(message) {\n    for (const id of [...this.channels.keys(), \"_self\"]) {\n      this.sendById(id, message);\n    }\n  }\n  sendById(id, message) {\n    if (id === \"_self\") {\n      this.processCommand(message);\n    } else {\n      const channel = this.channels.get(id);\n      message.guid = this.guid;\n      if (channel)\n        channel.send(JSON.stringify(message));\n    }\n  }\n  processCommand(parsedMessage) {\n    this.dispatchEvent(new CustomEvent(\"command\", {detail: parsedMessage}));\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
